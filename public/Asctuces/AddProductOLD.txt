import React, {useEffect, useState} from 'react';
import BreadCrumb from "../../partials/BreadCrumb";
import CardHeader from "../../partials/miniComponent/CardHeader";
import {useNavigate} from "react-router-dom";
import axiosClient from "../../../axios";
import Swal from "sweetalert2";

const AddProduct = () => {
    const navigate = useNavigate();
    const [input, setInput] = useState({status : 1});
    const [errors, setErrors] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [categories, setCategories] = useState([]);
    const [subCategories, setSubCategories] = useState([]);
    const [brands, setBrands] = useState([]);
    const [countries, setCountries] = useState([]);
    const [suppliers, setSuppliers] = useState([]);
    const [attributes, setAttributes] = useState([]);

    const getAttributes = () => {
        axiosClient.get('/get-attribute-list').then(res=>{
            setAttributes(res.data)
        })
    }

    const handleAttributeInput = (e, id) => {
        setAttribute_input(prevState => ({
            ...prevState,
            [id]:{
                ...prevState[id], [e.target.name]: e.target.value
            }
        }))
    }

    const handleAttributeFiledsRemove = (id) => {
        setAttributeField(oldValues => {
            return oldValues.filter(attributeField => attributeField !== id)
        })
        setAttribute_input( current => {
            const copy = {...current};
            delete copy[id];
            return copy;
        })
        setAttributeFieldId(attributeFieldId-1)
    }

    const getSuppliers = () => {
        axiosClient.get('/get-supplier-list').then(res=>{
            setSuppliers(res.data)
        })
    }

    const getCategories = () => {
        axiosClient.get('/get-category-list').then(res=>{
            setCategories(res.data)
        })
    }
    const getCountries = () => {
        axiosClient.get('/get-country-list').then(res=>{
            setCountries(res.data)
        })
    }

    const getBrands = () => {
        axiosClient.get('/get-brand-list').then(res=>{
            setBrands(res.data)
        })
    }

    const getSubCategories = (category_id) => {
        axiosClient.get(`/get-sub-category-list/${category_id}`).then(res=>{
            setSubCategories(res.data)
        })
    }

    const handleInput = (e) => {
        if (e.target.name === 'name'){
            let slug = e.target.value
            slug = slug.toLowerCase()
            slug = slug.replaceAll(' ', '-')
            setInput(prevState => ({...prevState, slug : slug}))
        } else if (e.target.name == 'category_id'){
            let category_id = parseInt(e.target.value);
            if (!Number.isNaN(category_id)){
                getSubCategories(e.target.value)
            }

        }
        setInput(prevState => ({...prevState, [e.target.name] : e.target.value}))
    }
    const handlePhoto = (e) =>{
        let file = e.target.files[0]
        let reader = new FileReader()
        reader.onloadend = () =>{
            setInput(prevState => ({...prevState, photo : reader.result}))
        }
        reader.readAsDataURL(file)
    }

    const handleProductCreate = () => {
        setIsLoading(true)
        axiosClient.post('/product', input).then(res=>{
            setIsLoading(false)
            Swal.fire({
                position: "top-end",
                icon: res.data.cls,
                title: res.data.msg,
                showConfirmButton: false,
                toast:true,
                timer: 1500
            })
            //navigate('/product')
        }).catch(errors => {
            setIsLoading(false)
            if (errors.response.status == 422) {
                setErrors(errors.response.data.errors)
            }
        })
    }

    useEffect( () => {
        getCategories()
        getBrands()
        getCountries()
        getSuppliers()
        getAttributes()
    }, [])

    return (
        <>
            <BreadCrumb title={'Ajouter un produit'} />
            <div className="row ">
                <div className="col-md-12">
                    <div className="card">
                        <div className="card-header">
                            <CardHeader
                                title={'Ajouter un produit'}
                                link={'/product'}
                                icon={'fa-list'}
                                button_text={'Liste'}
                            />
                        </div>
                        <div className="card-body">
                            {/* name, slug, description, serial, photo, status */}
                            <div className="row ">
                                <div className="col-md-6">
                                    <label className={'w-100'}>
                                        <p>Libellé</p>
                                        <input
                                            className={ errors.name != undefined ? 'form-control mt-2 is-invalid' : 'form-control mt-2' }
                                            type={'text'}
                                            name={'name'}
                                            value={input.name}
                                            onChange={handleInput}
                                            placeholder={'Entrer une produit'}
                                        />
                                        <p className={'login-error-msg'}> <small> {errors.name != undefined ? errors.name[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100'}>
                                        <p>Slug</p>
                                        <input
                                            className={ errors.slug != undefined ? 'form-control mt-2 is-invalid' : 'form-control mt-2' }
                                            type={'text'}
                                            name={'slug'}
                                            value={input.slug}
                                            onChange={handleInput}
                                            placeholder={'Entrer un slug'}
                                        />
                                        <p className={'login-error-msg'}> <small> {errors.slug != undefined ? errors.slug[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Choisir une catégorie </p>
                                        <select
                                            className={ errors.category_id != undefined ? 'form-select mt-2 is-invalid' : 'form-select mt-2' }
                                            name={'category_id'}
                                            value={input.category_id}
                                            onChange={handleInput}
                                            placeholder={'Choisir une catégorie'}
                                        >
                                            <option> Choisir une catégorie </option>
                                            {categories.map((category, index) => (
                                                <option key={index} value={category.id}> {category.name} </option>
                                            ))}
                                        </select>
                                        <p className={'login-error-msg'}> <small> {errors.category_id != undefined ? errors.category_id[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Choisir une Sous-catégorie </p>
                                        <select
                                            className={ errors.sub_category_id != undefined ? 'form-select mt-2 is-invalid' : 'form-select mt-2' }
                                            name={'sub_category_id'}
                                            value={input.sub_category_id}
                                            onChange={handleInput}
                                            placeholder={'Choisir une Sous-catégorie'}
                                            disabled={input.category_id == undefined}
                                        >
                                            <option> Choisir une Sous-catégorie </option>
                                            {subCategories.map((sub_category, index) => (
                                                <option key={index} value={sub_category.id}> {sub_category.name} </option>
                                            ))}
                                        </select>
                                        <p className={'login-error-msg'}> <small> {errors.sub_category_id != undefined ? errors.sub_category_id[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Choisir une marque </p>
                                        <select
                                            className={ errors.brand_id != undefined ? 'form-select mt-2 is-invalid' : 'form-select mt-2' }
                                            name={'brand_id'}
                                            value={input.brand_id}
                                            onChange={handleInput}
                                            placeholder={'Choisir une marque'}
                                        >
                                            <option> Choisir une marque </option>
                                            {brands.map((brand, index) => (
                                                <option key={index} value={brand.id}> {brand.name} </option>
                                            ))}
                                        </select>
                                        <p className={'login-error-msg'}> <small> {errors.brand_id != undefined ? errors.brand_id[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Choisir l'origine du produit </p>
                                        <select
                                            className={ errors.country_id != undefined ? 'form-select mt-2 is-invalid' : 'form-select mt-2' }
                                            name={'country_id'}
                                            value={input.country_id}
                                            onChange={handleInput}
                                            placeholder={'Choisir l\'origine du produit'}
                                        >
                                            <option> Choisir l'origine du produit </option>
                                            {countries.map((country, index) => (
                                                <option key={index} value={country.id}> {country.name} </option>
                                            ))}
                                        </select>
                                        <p className={'login-error-msg'}> <small> {errors.country_id != undefined ? errors.country_id[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Choisir le fournisseur du produit </p>
                                        <select
                                            className={ errors.supplier_id != undefined ? 'form-select mt-2 is-invalid' : 'form-select mt-2' }
                                            name={'supplier_id'}
                                            value={input.supplier_id}
                                            onChange={handleInput}
                                            placeholder={'Choisir le fournisseur du produit'}
                                        >
                                            <option> Choisir le fournisseur du produit </option>
                                            {suppliers.map((supplier, index) => (
                                                <option key={index} value={supplier.id}> {supplier.name} - {supplier.phone}</option>
                                            ))}
                                        </select>
                                        <p className={'login-error-msg'}> <small> {errors.supplier_id != undefined ? errors.supplier_id[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Status</p>
                                        <select
                                            className={ errors.status != undefined ? 'form-select mt-2 is-invalid' : 'form-select mt-2' }
                                            name={'status'}
                                            value={input.status}
                                            onChange={handleInput}
                                            placeholder={'Choisir un status'}
                                        >
                                            <option value={1}> Active </option>
                                            <option value={0}> Inactive </option>
                                        </select>
                                        <p className={'login-error-msg'}> <small> {errors.status != undefined ? errors.status[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-12">
                                    <div className="card my-4">
                                        <div className="card-header">
                                            <h5> Choisir les attributes du produit </h5>
                                        </div>
                                        <div className="card-body">
                                            {attributeField.map((id, ind) =>(
                                                <div className="row my-2 align-items-baseline">
                                                <div className="col-md-5">
                                                    <label className={'w-100 mt-4'}>
                                                        <p>Choisir un attribut</p>
                                                        <select
                                                            className='form-select mt-2'
                                                            name={'attribute_id'}
                                                            value={attribute_input[id] != undefined ? attribute_input[id].attribute_id : null}
                                                            onChange={(e   ) => handleAttributeInput(e, id) }
                                                            placeholder={'Choisir un attribut'}
                                                        >
                                                            <option> Choisir un attribut </option>
                                                            {attributes.map((value, index) => (
                                                                <option key={index} value={value.id}> {value.name} </option>
                                                            ))}
                                                        </select>
                                                        <p className={'login-error-msg'}> <small> {errors.attribute_id != undefined ? errors.attribute_id[0] : null } </small> </p>
                                                    </label>
                                                </div>
                                                <div className="col-md-5">
                                                    <label className={'w-100 mt-4'}>
                                                        <p>Choisir la valeur de l'attribut</p>
                                                        <select
                                                            className='form-select mt-2'
                                                            name={'attribute_id'}
                                                            value={attribute_input[id] != undefined ? attribute_input[id].value_id : null}
                                                            onChange={(e   ) => handleAttributeInput(e, id) }
                                                            placeholder={"Choisir la valeur de l'attribut"}
                                                        >
                                                            <option> Choisir la valeur de l'attribut </option>
                                                            {attributes.map((value, index) => (
                                                                <>
                                                                    {attribute_input[id] != undefined && value.id == attribute_input[id].attribute_id ? ((
                                                                        <option value={atr_value.id}> {atr_value.name} </option>
                                                                    )) : null }
                                                                </>
                                                            ))}
                                                        </select>
                                                        <p className={'login-error-msg'}> <small> {errors.attribute_id != undefined ? errors.attribute_id[0] : null } </small> </p>
                                                    </label>
                                                </div>
                                                <div className="col-md-2">
                                                    {attributeField.length -1 == ind ?
                                                        <div className={'btn btn-danger'} onClick={handleAttributeFiledsRemove(id)}>
                                                            <i className="fa-solid fa-minus"></i>
                                                        </div> : null
                                                    }
                                                </div>
                                            </div>
                                            ))}
                                        </div>
                                    </div>
                                </div>

                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Description</p>
                                        <textarea
                                            className={ errors.description != undefined ? 'form-control mt-2 is-invalid' : 'form-control mt-2' }
                                            name={'description'}
                                            value={input.description}
                                            onChange={handleInput}
                                            placeholder={'Entrer une description'}
                                        />
                                        <p className={'login-error-msg'}> <small> {errors.description != undefined ? errors.description[0] : null } </small> </p>
                                    </label>
                                </div>
                                <div className="col-md-6">
                                    <label className={'w-100 mt-4'}>
                                        <p>Photo</p>
                                        <input
                                            className={ errors.photo != undefined ? 'form-control mt-2 is-invalid' : 'form-control mt-2' }
                                            type={'file'}
                                            name={'photo'}
                                            onChange={handlePhoto}
                                            placeholder={'Joindre une photo'}
                                        />
                                        <p className={'login-error-msg'}> <small> {errors.photo != undefined ? errors.photo[0] : null } </small> </p>
                                    </label>
                                    {input.photo !=  undefined ?
                                        <div className='row'>
                                            <div className="col-6">
                                                <div className="photo-preview mt-3">
                                                    <img src={input.photo} alt={'Photo preview'} className={'img-thumbnail aspect-one'} />
                                                </div>
                                            </div>
                                        </div> : null
                                    }
                                </div>
                                <div className="col-md-12">
                                    <div className="row justify-content-center">
                                        <div className="col-md-4">
                                            <div className={'d-grid mt-4'}>
                                                <button className={'btn theme-button'} onClick={handleProductCreate} dangerouslySetInnerHTML={{__html: isLoading ? ' <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> Chargement... ' : ' Ajouter une produit ' }}/>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

/*
----------------- Product ---------------
1/ title
2/ slug
3/ description
4/ category_id
5/ sub_category_id
6/ brand_id
7/ status
8/ cost
9/ price
10/discount_percent
11/discount_fixed
12/discount_start
13/discount_end
14/ stock
15/ country_id //country_origin
16/ sku
17/ created_by_id
18/ updated_by_id
19/ provider_id

-------------Product_attributtes---------------------
1/ product_id
2/ attribute_id
3/ attribute_value_id

---------------- Product_specifications--------------
1/product_id
2/name
3/value

---------------Product_photo----------------------
1/ product_id
2/ photo
3/ is_primary

--------------Product_SEO-----------------------
1/ product_id
2/ meta_title
3/ meta_description
4/ meta_keywords
5/ og_image

 */

export default AddProduct;